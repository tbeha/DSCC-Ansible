---
- name: Get Volumes of a Storage System
  # Get the volumes of a storage system identified by the system name
  # v2.0 10/13/2024 Thomas Beha
  # Parameter:
  #   SystemName  - name of the Storage system
  #
  # Accessed data file:
  #   systems.json
  #
  # Run command:
  #   ansible-playbook Get-StorageSystem-Volumes.yaml -e "SystemName='<systemname>'"
  #
  hosts: localhost
  vars:
    limit: 250
    method: "GET"
    request_uri: "{{ storage['resourceUri'] }}/volumes?limit={{ limit}}&offset=0"
  tasks:

    - name: Get storage systems from systems.json
      ansible.builtin.set_fact:
        systems: "{{ lookup('file', 'systems.json') | from_json}}"

    - name: Lookup system
      vars:
        key: "{{ SystemName }}"
      ansible.builtin.set_fact:
        storage: "{{ systems[key] }}"

    - name: Check for limit
      ansible.builtin.set_fact:
        limit: "{{ Limit }}"
      when: Limit is defined and Limit != ""

    - name: DSCC API Call
      ansible.builtin.include_tasks:
        file: DSCC-API-Call.yaml

    - name: Retry the command if status 401
      ansible.builtin.include_tasks:
        file: DSCC-API-401.yaml
      when: status == '401'

    - name: Initialize volume dictionary
      ansible.builtin.set_fact:
        volumes: "{{ volumes  | default( {} ) }}"

    - name: Loop through Systems
      ansible.builtin.set_fact:
        volumes: "{{ volumes | combine({item.name: {'id': item.id, 'resourceUri': item.resourceUri}}) }}"
      with_items: "{{ response.json['items'] }}"

    - name: Store the volumes List
      ansible.builtin.copy:
        content: "{{ volumes | to_json }}"
        dest: "{{ SystemName }}.volumes.json"
        mode: '0644'

    - name: Show Results
      vars:
        elements: "{{ volumes }}"
        elementname: "{{ SystemName }}-Volumes"
        result: "{{ response }}"
      ansible.builtin.include_tasks:
        file: DisplayResults.yaml
